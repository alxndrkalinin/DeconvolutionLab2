/*
 * DeconvolutionLab2
 * 
 * Conditions of use: You are free to use this software for research or
 * educational purposes. In addition, we expect you to include adequate
 * citations and acknowledgments whenever you present or publish results that
 * are based on it.
 * 
 * Reference: DeconvolutionLab2: An Open-Source Software for Deconvolution
 * Microscopy D. Sage, L. Donati, F. Soulez, D. Fortun, G. Schmit, A. Seitz,
 * R. Guiet, C. Vonesch, M Unser, Methods of Elsevier, 2017.
 */

/*
 * Copyright 2010-2017 Biomedical Imaging Group at the EPFL.
 * 
 * This file is part of DeconvolutionLab2 (DL2).
 * 
 * DL2 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * 
 * DL2 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * DL2. If not, see <http://www.gnu.org/licenses/>.
 */

package deconvolutionlab.modules;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JTextField;

import deconvolution.Command;
import deconvolution.Token;
import deconvolutionlab.Config;
import lab.component.HTMLPane;

public class LanguageModule extends AbstractModule implements ActionListener {

	private HTMLPane			language;
	private JComboBox<String>	cmb;
	private JComboBox<String>	gui;
	private JTextField			txt;

	public LanguageModule(boolean expanded) {
		super("Language", "", "", "", expanded);
	}

	@Override
	public JPanel buildExpandedPanel() {
		language = new HTMLPane("Monaco", 100, 100);
		cmb = new JComboBox<String>(new String[] { "Command line", "ImageJ Macro", "Java", "Matlab" });
		gui = new JComboBox<String>(new String[] { "Run (Headless)", "Launch (with control panel)" });
		txt = new JTextField("Job", 8);
		JPanel pn = new JPanel(new FlowLayout());
		pn.add(txt);
		pn.add(cmb);
		pn.add(gui);

		JPanel panel = new JPanel(new BorderLayout());
		panel.add(pn, BorderLayout.NORTH);
		panel.add(language.getPane(), BorderLayout.CENTER);
		cmb.addActionListener(this);
		gui.addActionListener(this);
		Config.register(getName(), "language", cmb, cmb.getItemAt(0));
		Config.register(getName(), "headless", gui, gui.getItemAt(0));
		Config.register(getName(), "job", txt, "Job");
		language.clear();
		return panel;
	}

	@Override
	public void expand() {
		super.expand();
		update();
	}

	public void update() {
		if (cmb.getSelectedIndex() == 0) {
			language.clear();
			String run = gui.getSelectedIndex() == 0 ? " Run " : " Launch ";
			language.append("p", "java -jar DeconvolutionLab_2.jar " + run + Command.command());
			language.append("p", "");
			language.append("p", "java -cp JTransforms.jar:DeconvolutionLab_2.jar DeconvolutionLab2 "+ run + Command.command());
		}
		else if (cmb.getSelectedIndex() == 1) {
			language.clear();
			language.append("p", imagej(gui.getSelectedIndex() == 0));
		}
		else if (cmb.getSelectedIndex() == 2) {
			language.clear();
			language.append("p", java(gui.getSelectedIndex() == 0));
		}
		else if (cmb.getSelectedIndex() == 3) {
			language.clear();
			String text = "Matlab code, not yet implemented";
			language.append("p", text);
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		super.actionPerformed(e);
		if (e.getSource() == cmb)
			update();
		if (e.getSource() == gui)
			update();
	}

	@Override
	public void close() {
	}

	@Override
	public void setCommand(String command) {
		update();
	}

	@Override
	public String getCommand() {
		return "";
	}

	private String imagej(boolean headless) {
		String job = txt.getText();
		String macro = "<p>// Job: " + job + " </p>";
		macro += "<p>// Macro generated by DeconvolutionLab2 </p>";
		macro += "<p>// " + new SimpleDateFormat("dd/MM/yy HH:m:s").format(new Date()) + " </p>";
		String param = "<p>parameters = \"\"</p>";
		ArrayList<Token> tokens = Command.parse(Command.command());
		String image = "image = \" NOT DEFINED \" ";
		String psf = "psf = \" NOT DEFINED \" ";
		String algo = "algo = \" NOT DEFINED \" ";
		for (Token token : tokens) {
			if (token.keyword.equals("-image"))
				image = "<p>image = \" -image " + token.parameters.trim() + "\" </p>";
			else if (token.keyword.equals("-psf"))
				psf = "<p>psf = \" -psf " + token.parameters.trim() + "\" </p>";
			else if (token.keyword.equals("-algorithm"))
				algo = "<p>algorithm = \" -algorithm " + token.parameters.trim() + "\" </p>";
			else
				param += "<p>parameters += \" " + token.keyword + " " + token.parameters.trim() + "\" </p>";
		}

		String option = macro + image + psf + algo + param;
		String cmd = "";
		if (headless)
			cmd = "<p>run(\"DeconvolutionLab2 Run\", image + psf + algorithm + parameters)</p>";
		else
			cmd = "<p>run(\"DeconvolutionLab2 Launch\", image + psf + algorithm + parameters)</p>";

		return option + cmd;
	}
	
	
	private String java(boolean headless) {
		String job = txt.getText();
		String p = headless ? ".deconvolve(false);" : ".launch(\"" + job + "\", false);";
		String tab1 = "<p style=\"padding-left:10px\">";
		String tab2 = "<p style=\"padding-left:20px\">";
		String code = "";
		code += "<p>import deconvolution.Deconvolution;</p>";
		code += "<p>import ij.plugin.PlugIn;</p>";
		code += "<p></p>";
		
		code += "<p>public class DeconvolutionLab2_" + job + " implements PlugIn {</p>";
		code += tab1 + "public DeconvolutionLab2_" + job + "() {</p>";
	
		String param = tab2 + "String parameters = \"\";</p>";
		ArrayList<Token> tokens = Command.parse(Command.command());
		String image = tab2 + "String image = \" NOT DEFINED \";";
		String psf   = tab2 + "String psf = \" NOT DEFINED \";";
		String algo  = tab2 + "String algo = \" NOT DEFINED \";";
		for (Token token : tokens) {
			if (token.keyword.equals("-image"))
				image = tab2 + "String image = \" -image " + token.parameters.trim() + "\";</p>";
			else if (token.keyword.equals("-psf"))
				psf = tab2 + "String psf = \" -psf " + token.parameters.trim() + "\";</p>";
			else if (token.keyword.equals("-algorithm"))
				algo = tab2 + "String algorithm = \" -algorithm " + token.parameters.trim() + "\";</p>";
			else
				param += tab2 + "parameters += \" " + token.keyword + " " + token.parameters.trim() + "\";</p>";
		}
		code += image + psf + algo + param;
		code += tab2 + "new Deconvolution(image + psf + algorithm + parameters)" + p;
		code += tab1 + "}</p>";
		
		code += tab1 + "<p></p>";
		
		code += tab1 + "@Override</p>";
		code += tab1 + "public void run(String arg0) {</p>";
		code += tab2 + " new DeconvolutionLab2_" + job + "();</p>";
		
		code += tab1 + "}</p>";
		code += "<p>}</p>";
		return code;
	}
}
